name: PR Tests
run-name: ${{ github.actor }} triggered PR tests üß™

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  pull_request_target:
    types: [opened, synchronize, reopened, ready_for_review]

# Cancel previous runs when new commits are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  test:
    # Skip draft PRs unless they're marked as ready for review
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        rust: [stable, beta]
        include:
          - rust: stable
            can-fail: false
          - rust: beta
            can-fail: true
    
    continue-on-error: ${{ matrix.can-fail }}
    
    steps:
    - name: Checkout PR code
      uses: actions/checkout@v4
      with:
        # For pull_request events, this checks out the PR branch
        # For pull_request_target, we need to specify the PR ref
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Setup Librdkafka
      run: |
        sudo apt-get update
        sudo apt-get install -y librdkafka-dev
        
    - name: Setup Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        override: true
        components: rustfmt, clippy
        
    - name: Cache cargo registry and build artifacts
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-
          ${{ runner.os }}-cargo-
        
    - name: Check code formatting
      run: |
        echo "üé® Checking code formatting..."
        cd tonerre
        cargo fmt --all -- --check
        
    - name: Run Clippy lints
      run: |
        echo "üìé Running Clippy lints..."
        cd tonerre
        cargo clippy --all-targets --all-features -- -D warnings
        
    - name: Run tests
      run: |
        echo "üß™ Running tests..."
        cd tonerre
        cargo test --all-features --verbose
        
    - name: Run tests (no default features)
      run: |
        echo "üß™ Running tests without default features..."
        cd tonerre
        cargo test --no-default-features --verbose
        
    - name: Test examples
      run: |
        echo "üìù Testing examples..."
        
        # Test each example
        for example_dir in examples/*/; do
          if [ -d "$example_dir" ]; then
            example_name=$(basename "$example_dir")
            echo "Testing example: $example_name"
            cd "$example_dir"
            
            # Check if it compiles
            cargo check
            
            # Run tests if they exist
            if cargo test --dry-run 2>/dev/null | grep -q "test result:"; then
              cargo test
            else
              echo "No tests found for $example_name, skipping test run"
            fi
            
            cd - > /dev/null
          fi
        done

  security-audit:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout PR code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        
    - name: Install cargo-audit
      run: cargo install cargo-audit
      
    - name: Run security audit
      run: |
        echo "üîí Running security audit..."
        cd tonerre
        cargo audit

  coverage:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout PR code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: llvm-tools-preview
        
    - name: Setup Librdkafka
      run: |
        sudo apt-get update
        sudo apt-get install -y librdkafka-dev

    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov
      
    - name: Generate code coverage
      run: |
        echo "üìä Generating code coverage..."
        cd tonerre
        cargo llvm-cov --all-features --workspace --lcov --output-path ../lcov.info
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Check if PR modifies version (warn if it does)
  version-check:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout PR code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0
        
    - name: Check if version was modified
      run: |
        echo "üîç Checking if version was modified in this PR..."
        
        # Get the base branch
        git fetch origin ${{ github.event.pull_request.base.ref }}
        BASE_SHA="${{ github.event.pull_request.base.sha }}"
        
        # Check if Cargo.toml was modified
        if git diff --name-only "$BASE_SHA"...HEAD | grep -q "tonerre/Cargo.toml"; then
          echo "‚ö†Ô∏è Cargo.toml was modified in this PR"
          
          # Get version from base and current
          git show "$BASE_SHA:tonerre/Cargo.toml" > /tmp/base_cargo.toml 2>/dev/null || echo 'version = "0.0.0"' > /tmp/base_cargo.toml
          BASE_VERSION=$(grep '^version = ' /tmp/base_cargo.toml | sed 's/version = "\(.*\)"/\1/' || echo "unknown")
          CURRENT_VERSION=$(grep '^version = ' tonerre/Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          
          if [ "$BASE_VERSION" != "$CURRENT_VERSION" ]; then
            echo "## ‚ö†Ô∏è Version Changed in PR" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Base version:** $BASE_VERSION" >> $GITHUB_STEP_SUMMARY
            echo "**New version:** $CURRENT_VERSION" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "ü§ñ **Note:** When this PR is merged, it will automatically trigger a new release!" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "‚úÖ No version changes detected"
        fi

  # Summary job that depends on all others
  test-summary:
    runs-on: ubuntu-latest
    needs: [test, security-audit, coverage, version-check]
    if: always() && github.event.pull_request.draft == false
    
    steps:
    - name: Check all jobs status
      run: |
        echo "## üß™ PR Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check test results
        if [ "${{ needs.test.result }}" = "success" ]; then
          echo "‚úÖ **Tests:** All tests passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Tests:** Some tests failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Check security audit
        if [ "${{ needs.security-audit.result }}" = "success" ]; then
          echo "‚úÖ **Security:** No vulnerabilities found" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ö†Ô∏è **Security:** Audit failed or found issues" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Check coverage
        if [ "${{ needs.coverage.result }}" = "success" ]; then
          echo "‚úÖ **Coverage:** Report generated" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ö†Ô∏è **Coverage:** Failed to generate report" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**PR:** #${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
        echo "**Author:** @${{ github.event.pull_request.user.login }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.event.pull_request.head.ref }}" >> $GITHUB_STEP_SUMMARY
        
        # Fail the workflow if critical jobs failed
        if [ "${{ needs.test.result }}" != "success" ]; then
          echo "‚ùå Critical tests failed - blocking PR"
          exit 1
        fi
